@test_suite(name="UserRegistrationValidation", version="1.1")
  description: "Comprehensive validation tests for user registration"
  environment: "testing"
  timeout: 300

@test_case(name="valid_user_registration")
  description: "Test successful user registration with valid data"
  category: "positive"

  input:
    user_data:
      email: "john.doe@example.com"
      password: "SecurePass123!"
      first_name: "John"
      last_name: "Doe"
      date_of_birth: "1990-05-15"
      phone: "+1-555-0123"
      preferences:
        newsletter: true
        notifications: "email"
        language: "en"

  expected_output:
    status: "success"
    user_id: "user_abc123def456"
    verification_token: "verify_xyz789"
    email_sent: true

  validations:
  - field: "user_id"
    rule: "pattern"
    pattern: "^user_[a-zA-Z0-9]{24}$"
  - field: "verification_token"
    rule: "length"
    min: 32
    max: 32
  - field: "email_sent"
      rule: "equals"
      value: true

@test_case(name="invalid_email_formats")
  description: "Test various invalid email formats"
  category: "negative"

  input_matrix:
    - email: ""
      expected_error: "email_required"
    - email: "invalid-email"
      expected_error: "email_invalid_format"
    - email: "user@"
      expected_error: "email_invalid_format"
    - email: "@example.com"
      expected_error: "email_invalid_format"
    - email: "user.name+tag@example.co.uk"
      expected_error: null  # This should be valid

  expected_output:
    status: "error"
    error_code: "{{expected_error}}"
    field: "email"

@test_case(name="password_complexity")
  description: "Test password strength requirements"
  category: "negative"

  input_matrix:
    - password: "123"
      expected_error: "password_too_short"
    - password: "password"
      expected_error: "password_no_uppercase"
    - password: "PASSWORD"
      expected_error: "password_no_lowercase"
    - password: "Password"
      expected_error: "password_no_numbers"
    - password: "Password123"
      expected_error: "password_no_special_chars"

  expected_output:
    status: "error"
    error_code: "{{expected_error}}"
    field: "password"

@test_case(name="age_validation")
  description: "Test age restrictions for registration"
  category: "edge_case"

  input_matrix:
    - date_of_birth: "2020-01-01"
      expected_error: "user_too_young"
    - date_of_birth: "1800-01-01"
      expected_error: "invalid_date"
    - date_of_birth: "2005-12-31"
      expected_error: "user_too_young"
    - date_of_birth: "2006-01-01"
      expected_error: null  # Should be valid (18+)

  expected_output:
    status: "error"
    error_code: "{{expected_error}}"
    field: "date_of_birth"

@test_case(name="duplicate_email_prevention")
  description: "Test prevention of duplicate email registration"
  category: "security"

  setup:
    existing_user:
      email: "existing@example.com"
      status: "active"

  input:
    user_data:
      email: "existing@example.com"
      password: "NewSecurePass123!"
      first_name: "Jane"
      last_name: "Smith"

  expected_output:
    status: "error"
    error_code: "email_already_registered"
    field: "email"
    suggestion: "try_password_reset"

@test_case(name="rate_limiting")
  description: "Test registration rate limiting"
  category: "security"

  setup:
    recent_registrations: 10
    time_window: "1_hour"

  input:
    user_data:
      email: "rate.limit@example.com"
      password: "SecurePass123!"
      first_name: "Rate"
      last_name: "Limit"

  expected_output:
    status: "error"
    error_code: "rate_limit_exceeded"
    retry_after: 3600

@performance_test(name="registration_throughput")
  description: "Test registration system performance under load"
  category: "performance"

  load_profile:
    concurrent_users: 100
    duration: 300  # 5 minutes
    ramp_up_time: 60  # 1 minute

  input:
    user_data_template:
      email: "perf.user.{{user_id}}@example.com"
      password: "PerfTestPass123!"
      first_name: "Perf"
      last_name: "User{{user_id}}"

  performance_assertions:
    - metric: "response_time_p95"
      operator: "<"
      value: 2000  # ms
    - metric: "error_rate"
      operator: "<"
      value: 0.01  # 1%
    - metric: "throughput"
      operator: ">"
      value: 50  # requests per second

@cleanup
  description: "Clean up test data after execution"
  actions:
    - delete_test_users: true
    - reset_rate_limits: true
    - clear_email_queue: true
